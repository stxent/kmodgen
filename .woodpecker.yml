when:
  - event: [push, manual]

clone:
  git:
    image: ${DOCKER_PREFIX}/network-utils
    pull: true
    commands:
      - git clone ${CI_REPO_CLONE_URL} project
      - cd project
      - git checkout ${CI_COMMIT_SHA}
      - git submodule update --init --recursive
      - export REPO_REVISION=`git rev-list HEAD --count`
      - echo "ARTIFACT_PREFIX=${CI_REPO_NAME}_r$${REPO_REVISION}-${CI_COMMIT_SHA:0:8}_b${CI_PIPELINE_NUMBER}" >> envvars

steps:
  test:
    image: ${DOCKER_PREFIX}/python-kicad
    pull: true
    commands:
      - cd project
      - pytest

  build:
    image: ${DOCKER_PREFIX}/python-kicad
    pull: true
    commands:
      - cd project
      - mkdir -p output
      - cmake . -B build_default -DUSE_PRETTY=ON -DUSE_X3D=OFF -DCMAKE_INSTALL_PREFIX=output
      - make -C build_default -j `nproc`
      - make -C build_default install

  deploy:
    image: ${DOCKER_PREFIX}/network-utils
    pull: true
    commands:
      - cd project
      - source ./envvars
      - mkdir deploy
      - tar -cvJ -f deploy/$${ARTIFACT_PREFIX}.tar.xz -C output .
      - cd deploy
      - smbclient "//$${DEPLOY_SERVER_ENV}" -U "$${DEPLOY_USER_NAME_ENV}%$${DEPLOY_USER_PASSWORD_ENV}" -c "mkdir ${CI_REPO_NAME}" || true
      - smbclient "//$${DEPLOY_SERVER_ENV}" -U "$${DEPLOY_USER_NAME_ENV}%$${DEPLOY_USER_PASSWORD_ENV}" -c "cd ${CI_REPO_NAME}; mkdir ${CI_COMMIT_BRANCH}" || true
      - smbclient "//$${DEPLOY_SERVER_ENV}" -U "$${DEPLOY_USER_NAME_ENV}%$${DEPLOY_USER_PASSWORD_ENV}" -c "cd ${CI_REPO_NAME}/${CI_COMMIT_BRANCH}; prompt; mput *"
    environment:
      DEPLOY_SERVER_ENV:
        from_secret: DEPLOY_SERVER
      DEPLOY_USER_NAME_ENV:
        from_secret: DEPLOY_USER_NAME
      DEPLOY_USER_PASSWORD_ENV:
        from_secret: DEPLOY_USER_PASSWORD
